<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.sonatype.oss</groupId>
		<artifactId>oss-parent</artifactId>
		<version>7</version>
	</parent>

	<groupId>net.alchim31.runner</groupId>
	<artifactId>run_on_jvm</artifactId>
	<version>0.3.0-SNAPSHOT</version>
	<name>${project.artifactId}</name>
	<description>A tool to run jvm script (java, scala, ...) with dependencies</description>
	<inceptionYear>2012</inceptionYear>
	<licenses>
		<license>
			<name>Unlicense</name>
			<url>http://unlicense.org</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<properties>
		<maven.compiler.source>1.7</maven.compiler.source>
		<maven.compiler.target>1.7</maven.compiler.target>
		<encoding>UTF-8</encoding>
		<mavenVersion>3.0.3</mavenVersion>
		<wagonVersion>1.0</wagonVersion>
		<aetherVersion>1.13.1</aetherVersion>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.codehaus.plexus</groupId>
				<artifactId>plexus-utils</artifactId>
				<version>2.1</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>0.11.6</version>
		</dependency-->
		<dependency>
			<groupId>org.sonatype.aether</groupId>
			<artifactId>aether-api</artifactId>
			<version>${aetherVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.sonatype.aether</groupId>
			<artifactId>aether-spi</artifactId>
			<version>${aetherVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.sonatype.aether</groupId>
			<artifactId>aether-util</artifactId>
			<version>${aetherVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.sonatype.aether</groupId>
			<artifactId>aether-impl</artifactId>
			<version>${aetherVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.sonatype.aether</groupId>
			<artifactId>aether-connector-file</artifactId>
			<version>${aetherVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.sonatype.aether</groupId>
			<artifactId>aether-connector-wagon</artifactId>
			<version>${aetherVersion}</version>
			<exclusions>
				<exclusion>
					<groupId>org.sonatype.sisu</groupId>
					<artifactId>sisu-inject-plexus</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.maven.wagon</groupId>
			<artifactId>wagon-provider-api</artifactId>
			<version>${wagonVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.sonatype.maven</groupId>
			<artifactId>wagon-ahc</artifactId>
			<version>1.2.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-aether-provider</artifactId>
			<version>3.0.4</version>
		</dependency>
		<!-- dependency>
			<groupId>org.codehaus.plexus</groupId>
			<artifactId>plexus-classworlds</artifactId>
			<version>2.4.2</version>
		</dependency-->
		<dependency>
			<groupId>org.codehaus.plexus</groupId>
			<artifactId>plexus-utils</artifactId>
			<version>2.1</version>
		</dependency>
		<!-- Custom Language -->
		<dependency>
			<groupId>org.mozilla</groupId>
			<artifactId>rhino</artifactId>
			<version>1.7R4</version>
			<scope>provided</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-compiler</artifactId>
			<version>2.9.2</version>
			<scope>provided</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.2</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-jdk14</artifactId>
			<version>1.7.2</version>
			<scope>runtime</scope>
		</dependency>		
		<!-- dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.0.9</version>
		</dependency-->		
		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<inherited>true</inherited>
				<configuration>
					<archive>
						<manifest>
							<mainClass>net_alchim31_runner.Main</mainClass>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<!-- OneJar via onejar-maven-plugin add 0.5s at startup (vs shade) -->
			<!-- TODO try proguard -->
			<!-- plugin>
				<artifactId>maven-shade-plugin</artifactId>
				<version>1.3.3</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<shadedArtifactAttached>true</shadedArtifactAttached>
							<shadedClassifierName>onejar</shadedClassifierName>
						</configuration>
					</execution>
				</executions>
			</plugin -->
			<!-- 
			<plugin>
				<groupId>com.github.wvengen</groupId>
				<artifactId>proguard-maven-plugin</artifactId>
				<version>2.0.7-SNAPSHOT</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>proguard</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<obfuscate>false</obfuscate>
					<injar>${project.build.finalName}-onejar.jar</injar>
					<outjar>${project.build.finalName}-small.jar</outjar>
					<includeDependency>false</includeDependency>
					<outputDirectory>${project.build.directory}</outputDirectory>
					<proguardInclude>${basedir}/proguard.conf</proguardInclude>
					<options>
                        <option>-allowaccessmodification</option>
                        <option>-keep public class net_alchim31_runner.Main { *; }</option>
                    </options>
					<libs>
						<lib>${java.home}/lib/rt.jar</lib>
						<lib>${java.home}/lib/jsse.jar</lib>
					</libs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>animal-sniffer-maven-plugin</artifactId>
				<version>1.6</version>
			</plugin>
			-->
			<!-- plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>appassembler-maven-plugin</artifactId>
				<version>1.3</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>assemble</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
				    <assembleDirectory>${project.build.directory}/${project.build.finalName}-app/${project.build.finalName}</assembleDirectory>
					<licenseHeaderFile>${basedir}/UNLICENSE</licenseHeaderFile>
					<repositoryName>lib</repositoryName>
					<copyConfigurationDirectory>true</copyConfigurationDirectory>
					<configurationSourceDirectory>src/main/app/etc</configurationSourceDirectory>
					<programs>
						<program>
							<mainClass>net_alchim31_runner.Main</mainClass>
							<name>roj</name>
						</program>
					</programs>
					<binFileExtensions>
						<windows>.cmd</windows>
					</binFileExtensions>
				</configuration>
			</plugin-->
			<plugin>
				<groupId>net.rumati.maven.plugins</groupId>
				<artifactId>velocity-maven-plugin</artifactId>
				<version>0.3.0</version>
				<executions>
					<execution>
						<id>make-bin-script</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>velocity</goal>
						</goals>
						<configuration>
							<transformations>
								<transformation>
									<template>${project.basedir}/src/main/app/bin/roj.cmd.vm</template>
									<outputFile>${project.build.directory}/app/bin/roj.cmd</outputFile>
								</transformation>
								<transformation>
									<template>${project.basedir}/src/main/app/bin/roj.vm</template>
									<outputFile>${project.build.directory}/app/bin/roj</outputFile>
								</transformation>
							</transformations>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.3</version>
				<executions>
					<execution>
						<id>make-assembly</id> <!-- this is used for inheritance merges -->
						<phase>package</phase> <!-- bind to the packaging phase -->
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<tarLongFileMode>gnu</tarLongFileMode>
					<descriptors>
						<descriptor>src/main/assembly/app.xml</descriptor>
					</descriptors>
				</configuration>
			</plugin>
			<plugin>
                <!-- Separates the unit tests from the integration tests. -->
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.13</version>
				<configuration>
					<trimStackTrace>false</trimStackTrace>
					<skip>true</skip>
					<systemPropertyVariables>
						<logback.configurationFile>${basedir}/src/main/config/logback.xml</logback.configurationFile>
						<app.home>${project.build.directory}/${project.build.finalName}-app/${project.build.finalName}</app.home>
						<rojVersion>${project.version}</rojVersion>
					</systemPropertyVariables>
				</configuration>
				<executions>
					<execution>
						<id>unit-tests</id>
						<phase>test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
                            <!-- Never skip running the tests when the test phase is invoked -->
							<skip>false</skip>
							<includes>
                                <!-- Include unit tests within integration-test phase. -->
								<include>**/*Test.java</include>
							</includes>
							<excludes>
                                <!-- Exclude integration tests within (unit) test phase. -->
								<exclude>**/*ITest.java</exclude>
							</excludes>
						</configuration>
					</execution>
					<execution>
						<id>integration-tests</id>
						<phase>integration-test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
                            <!-- Never skip running the tests when the integration-test phase is invoked -->
							<skip>false</skip>
							<includes>
                                <!-- Include integration tests within integration-test phase. -->
								<include>**/*ITest.java</include>
							</includes>
							<additionalClasspathElements>
								<additionalClasspathElement>${project.build.directory}/${project.finalName}.jar</additionalClasspathElement>
							</additionalClasspathElements>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
